'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = BoundedDeque;

var _ArbitrarySizeDeque = require('./ArbitrarySizeDeque');

var _ArbitrarySizeDeque2 = _interopRequireDefault(_ArbitrarySizeDeque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BoundedDeque(iterable, maxlen) {

	this.maxlen = maxlen;

	this.container = new Array(maxlen);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
}

BoundedDeque.prototype = new _ArbitrarySizeDeque2.default();

BoundedDeque.prototype.len = function () {

	return this.length;
};

BoundedDeque.prototype.capacity = function () {

	return this.maxlen;
};

BoundedDeque.prototype.append = function (x) {

	if (this.length === this.maxlen) {

		this.container[this.center] = x;
		++this.center;
		this.center %= this.maxlen;
	} else {

		var i = (this.center + this.length) % this.maxlen;
		this.container[i] = x;
		++this.length;
	}

	return this;
};

BoundedDeque.prototype.appendleft = function (x) {

	--this.center;
	this.center += this.maxlen;
	this.center %= this.maxlen;
	this.container[this.center] = x;

	if (this.length < this.maxlen) ++this.length;

	return this;
};

BoundedDeque.prototype.clear = function () {

	this.center = 0;

	this.length = 0;

	this.container = new Array(this.maxlen);

	return this;
};

BoundedDeque.prototype.copy = function () {

	return new BoundedDeque(this, this.maxlen);
};

BoundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.maxlen];
};

BoundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	// TODO use null instead of 0 for non-Number deques
	container[index] = 0;

	--this.length;

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbXBsZW1lbnRhdGlvbi9Cb3VuZGVkRGVxdWUuanMiXSwibmFtZXMiOlsiQm91bmRlZERlcXVlIiwiaXRlcmFibGUiLCJtYXhsZW4iLCJjb250YWluZXIiLCJBcnJheSIsImNlbnRlciIsImxlbmd0aCIsImV4dGVuZCIsInByb3RvdHlwZSIsImxlbiIsImNhcGFjaXR5IiwiYXBwZW5kIiwieCIsImkiLCJhcHBlbmRsZWZ0IiwiY2xlYXIiLCJjb3B5IiwiX3doZXJlIiwiX2NoZWNrYm91bmRzIiwiX3BvcGluZGV4IiwiaW5kZXgiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxZOztBQUZ4Qjs7Ozs7O0FBRWUsU0FBU0EsWUFBVCxDQUF3QkMsUUFBeEIsRUFBbUNDLE1BQW5DLEVBQTRDOztBQUUxRCxNQUFLQSxNQUFMLEdBQWNBLE1BQWQ7O0FBRUEsTUFBS0MsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVdGLE1BQVgsQ0FBakI7O0FBRUEsTUFBS0csTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsS0FBS0wsYUFBYSxJQUFsQixFQUF5QixLQUFLTSxNQUFMLENBQWFOLFFBQWI7QUFHekI7O0FBRURELGFBQWFRLFNBQWIsR0FBeUIsa0NBQXpCOztBQUVBUixhQUFhUSxTQUFiLENBQXVCQyxHQUF2QixHQUE2QixZQUFhOztBQUV6QyxRQUFPLEtBQUtILE1BQVo7QUFFQSxDQUpEOztBQU1BTixhQUFhUSxTQUFiLENBQXVCRSxRQUF2QixHQUFrQyxZQUFhOztBQUU5QyxRQUFPLEtBQUtSLE1BQVo7QUFFQSxDQUpEOztBQU1BRixhQUFhUSxTQUFiLENBQXVCRyxNQUF2QixHQUFnQyxVQUFXQyxDQUFYLEVBQWU7O0FBRzlDLEtBQUssS0FBS04sTUFBTCxLQUFnQixLQUFLSixNQUExQixFQUFtQzs7QUFFbEMsT0FBS0MsU0FBTCxDQUFlLEtBQUtFLE1BQXBCLElBQThCTyxDQUE5QjtBQUNBLElBQUUsS0FBS1AsTUFBUDtBQUNBLE9BQUtBLE1BQUwsSUFBZSxLQUFLSCxNQUFwQjtBQUVBLEVBTkQsTUFRSzs7QUFFSixNQUFNVyxJQUFJLENBQUUsS0FBS1IsTUFBTCxHQUFjLEtBQUtDLE1BQXJCLElBQWdDLEtBQUtKLE1BQS9DO0FBQ0EsT0FBS0MsU0FBTCxDQUFlVSxDQUFmLElBQW9CRCxDQUFwQjtBQUNBLElBQUUsS0FBS04sTUFBUDtBQUVBOztBQUVELFFBQU8sSUFBUDtBQUVBLENBckJEOztBQXVCQU4sYUFBYVEsU0FBYixDQUF1Qk0sVUFBdkIsR0FBb0MsVUFBV0YsQ0FBWCxFQUFlOztBQUVsRCxHQUFFLEtBQUtQLE1BQVA7QUFDQSxNQUFLQSxNQUFMLElBQWUsS0FBS0gsTUFBcEI7QUFDQSxNQUFLRyxNQUFMLElBQWUsS0FBS0gsTUFBcEI7QUFDQSxNQUFLQyxTQUFMLENBQWUsS0FBS0UsTUFBcEIsSUFBOEJPLENBQTlCOztBQUVBLEtBQUssS0FBS04sTUFBTCxHQUFjLEtBQUtKLE1BQXhCLEVBQWlDLEVBQUUsS0FBS0ksTUFBUDs7QUFFakMsUUFBTyxJQUFQO0FBRUEsQ0FYRDs7QUFhQU4sYUFBYVEsU0FBYixDQUF1Qk8sS0FBdkIsR0FBK0IsWUFBYTs7QUFFM0MsTUFBS1YsTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0MsTUFBTCxHQUFjLENBQWQ7O0FBRUEsTUFBS0gsU0FBTCxHQUFpQixJQUFJQyxLQUFKLENBQVcsS0FBS0YsTUFBaEIsQ0FBakI7O0FBRUEsUUFBTyxJQUFQO0FBRUEsQ0FWRDs7QUFZQUYsYUFBYVEsU0FBYixDQUF1QlEsSUFBdkIsR0FBOEIsWUFBYTs7QUFFMUMsUUFBTyxJQUFJaEIsWUFBSixDQUFrQixJQUFsQixFQUF5QixLQUFLRSxNQUE5QixDQUFQO0FBRUEsQ0FKRDs7QUFRQUYsYUFBYVEsU0FBYixDQUF1QlMsTUFBdkIsR0FBZ0MsVUFBV0osQ0FBWCxFQUFlOztBQUU5QyxNQUFLSyxZQUFMLENBQW1CTCxDQUFuQjs7QUFFQSxRQUFPLENBQUUsS0FBS1YsU0FBUCxFQUFtQixDQUFFLEtBQUtFLE1BQUwsR0FBY1EsQ0FBaEIsSUFBc0IsS0FBS1gsTUFBOUMsQ0FBUDtBQUVBLENBTkQ7O0FBU0FGLGFBQWFRLFNBQWIsQ0FBdUJXLFNBQXZCLEdBQW1DLFVBQVdoQixTQUFYLEVBQXVCaUIsS0FBdkIsRUFBK0I7O0FBRWpFLEtBQU1DLFFBQVFsQixVQUFVaUIsS0FBVixDQUFkOztBQUVBO0FBQ0E7QUFDQWpCLFdBQVVpQixLQUFWLElBQW1CLENBQW5COztBQUVBLEdBQUUsS0FBS2QsTUFBUDs7QUFFQSxRQUFPZSxLQUFQO0FBRUEsQ0FaRCIsImZpbGUiOiJCb3VuZGVkRGVxdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXJiaXRyYXJ5U2l6ZURlcXVlIGZyb20gJy4vQXJiaXRyYXJ5U2l6ZURlcXVlJyA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJvdW5kZWREZXF1ZSAoIGl0ZXJhYmxlICwgbWF4bGVuICkge1xuXG5cdHRoaXMubWF4bGVuID0gbWF4bGVuIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggbWF4bGVuICkgO1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5sZW5ndGggPSAwIDtcblxuXHRpZiAoIGl0ZXJhYmxlICE9PSBudWxsICkgdGhpcy5leHRlbmQoIGl0ZXJhYmxlICkgO1xuXG5cbn1cblxuQm91bmRlZERlcXVlLnByb3RvdHlwZSA9IG5ldyBBcmJpdHJhcnlTaXplRGVxdWUoICkgO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmxlbiA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMubGVuZ3RoIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY2FwYWNpdHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiB0aGlzLm1heGxlbiA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uICggeCApIHtcblxuXG5cdGlmICggdGhpcy5sZW5ndGggPT09IHRoaXMubWF4bGVuICkge1xuXG5cdFx0dGhpcy5jb250YWluZXJbdGhpcy5jZW50ZXJdID0geCA7XG5cdFx0Kyt0aGlzLmNlbnRlciA7XG5cdFx0dGhpcy5jZW50ZXIgJT0gdGhpcy5tYXhsZW4gO1xuXG5cdH1cblxuXHRlbHNlIHtcblxuXHRcdGNvbnN0IGkgPSAoIHRoaXMuY2VudGVyICsgdGhpcy5sZW5ndGggKSAlIHRoaXMubWF4bGVuIDtcblx0XHR0aGlzLmNvbnRhaW5lcltpXSA9IHggO1xuXHRcdCsrdGhpcy5sZW5ndGggO1xuXG5cdH1cblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmFwcGVuZGxlZnQgPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0LS10aGlzLmNlbnRlciA7XG5cdHRoaXMuY2VudGVyICs9IHRoaXMubWF4bGVuIDtcblx0dGhpcy5jZW50ZXIgJT0gdGhpcy5tYXhsZW4gO1xuXHR0aGlzLmNvbnRhaW5lclt0aGlzLmNlbnRlcl0gPSB4IDtcblxuXHRpZiAoIHRoaXMubGVuZ3RoIDwgdGhpcy5tYXhsZW4gKSArK3RoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCApIHtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMubWF4bGVuICkgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cbkJvdW5kZWREZXF1ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIG5ldyBCb3VuZGVkRGVxdWUoIHRoaXMgLCB0aGlzLm1heGxlbiApIDtcblxufSA7XG5cblxuXG5Cb3VuZGVkRGVxdWUucHJvdG90eXBlLl93aGVyZSA9IGZ1bmN0aW9uICggaSApIHtcblxuXHR0aGlzLl9jaGVja2JvdW5kcyggaSApIDtcblxuXHRyZXR1cm4gWyB0aGlzLmNvbnRhaW5lciAsICggdGhpcy5jZW50ZXIgKyBpICkgJSB0aGlzLm1heGxlbiBdIDtcblxufSA7XG5cblxuQm91bmRlZERlcXVlLnByb3RvdHlwZS5fcG9waW5kZXggPSBmdW5jdGlvbiAoIGNvbnRhaW5lciAsIGluZGV4ICkge1xuXG5cdGNvbnN0IHZhbHVlID0gY29udGFpbmVyW2luZGV4XSA7XG5cblx0Ly8gR0Ncblx0Ly8gVE9ETyB1c2UgbnVsbCBpbnN0ZWFkIG9mIDAgZm9yIG5vbi1OdW1iZXIgZGVxdWVzXG5cdGNvbnRhaW5lcltpbmRleF0gPSAwIDtcblxuXHQtLXRoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdmFsdWUgO1xuXG59IDtcbiJdfQ==