'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = SingleElementDeque;

var _jsError = require('@aureooms/js-error');

var _Deque = require('./Deque');

var _Deque2 = _interopRequireDefault(_Deque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SingleElementDeque(iterable) {

	this.empty = true;

	this.value = 0;

	if (iterable !== null) this.extend(iterable);
}

SingleElementDeque.prototype = new _Deque2.default();

SingleElementDeque.prototype.len = function () {

	return this.empty ? 0 : 1;
};

SingleElementDeque.prototype.capacity = function () {

	return 1;
};

SingleElementDeque.prototype.values = regeneratorRuntime.mark(function _callee() {
	return regeneratorRuntime.wrap(function _callee$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!this.empty) {
						_context.next = 2;
						break;
					}

					return _context.abrupt('return');

				case 2:
					_context.next = 4;
					return this.value;

				case 4:
				case 'end':
					return _context.stop();
			}
		}
	}, _callee, this);
});

SingleElementDeque.prototype.append = SingleElementDeque.prototype.appendleft = function (x) {

	this.empty = false;
	this.value = x;

	return this;
};

SingleElementDeque.prototype.clear = function () {

	this.empty = true;
	this.value = 0;

	return this;
};

SingleElementDeque.prototype.copy = function () {

	return new SingleElementDeque(this);
};

SingleElementDeque.prototype.pop = SingleElementDeque.prototype.popleft = function () {

	if (this.empty) throw new _jsError.IndexError("pop / popleft");

	var value = this.value;

	this.empty = true;
	this.value = 0;

	return value;
};

SingleElementDeque.prototype.get = function (i) {

	if (this.empty || i !== 0) throw new _jsError.IndexError(i);

	return this.value;
};

SingleElementDeque.prototype.set = function (i, value) {

	if (this.empty || i !== 0) throw new _jsError.IndexError(i);

	this.value = value;

	return this;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbXBsZW1lbnRhdGlvbi9TaW5nbGVFbGVtZW50RGVxdWUuanMiXSwibmFtZXMiOlsiU2luZ2xlRWxlbWVudERlcXVlIiwiaXRlcmFibGUiLCJlbXB0eSIsInZhbHVlIiwiZXh0ZW5kIiwicHJvdG90eXBlIiwibGVuIiwiY2FwYWNpdHkiLCJ2YWx1ZXMiLCJhcHBlbmQiLCJhcHBlbmRsZWZ0IiwieCIsImNsZWFyIiwiY29weSIsInBvcCIsInBvcGxlZnQiLCJnZXQiLCJpIiwic2V0Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLGtCOztBQUh4Qjs7QUFDQTs7Ozs7O0FBRWUsU0FBU0Esa0JBQVQsQ0FBOEJDLFFBQTlCLEVBQXlDOztBQUV2RCxNQUFLQyxLQUFMLEdBQWEsSUFBYjs7QUFFQSxNQUFLQyxLQUFMLEdBQWEsQ0FBYjs7QUFFQSxLQUFLRixhQUFhLElBQWxCLEVBQXlCLEtBQUtHLE1BQUwsQ0FBYUgsUUFBYjtBQUV6Qjs7QUFFREQsbUJBQW1CSyxTQUFuQixHQUErQixxQkFBL0I7O0FBRUFMLG1CQUFtQkssU0FBbkIsQ0FBNkJDLEdBQTdCLEdBQW1DLFlBQWE7O0FBRS9DLFFBQU8sS0FBS0osS0FBTCxHQUFhLENBQWIsR0FBaUIsQ0FBeEI7QUFFQSxDQUpEOztBQU1BRixtQkFBbUJLLFNBQW5CLENBQTZCRSxRQUE3QixHQUF3QyxZQUFhOztBQUVwRCxRQUFPLENBQVA7QUFFQSxDQUpEOztBQU1BUCxtQkFBbUJLLFNBQW5CLENBQTZCRyxNQUE3QiwyQkFBc0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBRWhDLEtBQUtOLEtBRjJCO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQSxZQUkvQixLQUFLQyxLQUowQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUF0Qzs7QUFRQUgsbUJBQW1CSyxTQUFuQixDQUE2QkksTUFBN0IsR0FDQVQsbUJBQW1CSyxTQUFuQixDQUE2QkssVUFBN0IsR0FBMEMsVUFBV0MsQ0FBWCxFQUFlOztBQUV4RCxNQUFLVCxLQUFMLEdBQWEsS0FBYjtBQUNBLE1BQUtDLEtBQUwsR0FBYVEsQ0FBYjs7QUFFQSxRQUFPLElBQVA7QUFFQSxDQVJEOztBQVVBWCxtQkFBbUJLLFNBQW5CLENBQTZCTyxLQUE3QixHQUFxQyxZQUFhOztBQUVqRCxNQUFLVixLQUFMLEdBQWEsSUFBYjtBQUNBLE1BQUtDLEtBQUwsR0FBYSxDQUFiOztBQUVBLFFBQU8sSUFBUDtBQUVBLENBUEQ7O0FBU0FILG1CQUFtQkssU0FBbkIsQ0FBNkJRLElBQTdCLEdBQW9DLFlBQWE7O0FBRWhELFFBQU8sSUFBSWIsa0JBQUosQ0FBd0IsSUFBeEIsQ0FBUDtBQUVBLENBSkQ7O0FBTUFBLG1CQUFtQkssU0FBbkIsQ0FBNkJTLEdBQTdCLEdBQ0FkLG1CQUFtQkssU0FBbkIsQ0FBNkJVLE9BQTdCLEdBQXVDLFlBQWE7O0FBRW5ELEtBQUssS0FBS2IsS0FBVixFQUFrQixNQUFNLHdCQUFnQixlQUFoQixDQUFOOztBQUVsQixLQUFNQyxRQUFRLEtBQUtBLEtBQW5COztBQUVBLE1BQUtELEtBQUwsR0FBYSxJQUFiO0FBQ0EsTUFBS0MsS0FBTCxHQUFhLENBQWI7O0FBRUEsUUFBT0EsS0FBUDtBQUVBLENBWkQ7O0FBY0FILG1CQUFtQkssU0FBbkIsQ0FBNkJXLEdBQTdCLEdBQW1DLFVBQVdDLENBQVgsRUFBZTs7QUFFakQsS0FBSyxLQUFLZixLQUFMLElBQWNlLE1BQU0sQ0FBekIsRUFBNkIsTUFBTSx3QkFBZ0JBLENBQWhCLENBQU47O0FBRTdCLFFBQU8sS0FBS2QsS0FBWjtBQUVBLENBTkQ7O0FBUUFILG1CQUFtQkssU0FBbkIsQ0FBNkJhLEdBQTdCLEdBQW1DLFVBQVdELENBQVgsRUFBZWQsS0FBZixFQUF1Qjs7QUFFekQsS0FBSyxLQUFLRCxLQUFMLElBQWNlLE1BQU0sQ0FBekIsRUFBNkIsTUFBTSx3QkFBZ0JBLENBQWhCLENBQU47O0FBRTdCLE1BQUtkLEtBQUwsR0FBYUEsS0FBYjs7QUFFQSxRQUFPLElBQVA7QUFFQSxDQVJEIiwiZmlsZSI6IlNpbmdsZUVsZW1lbnREZXF1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluZGV4RXJyb3IgfSBmcm9tICdAYXVyZW9vbXMvanMtZXJyb3InIDtcbmltcG9ydCBEZXF1ZSBmcm9tICcuL0RlcXVlJyA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpbmdsZUVsZW1lbnREZXF1ZSAoIGl0ZXJhYmxlICkge1xuXG5cdHRoaXMuZW1wdHkgPSB0cnVlIDtcblxuXHR0aGlzLnZhbHVlID0gMCA7XG5cblx0aWYgKCBpdGVyYWJsZSAhPT0gbnVsbCApIHRoaXMuZXh0ZW5kKCBpdGVyYWJsZSApIDtcblxufVxuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlID0gbmV3IERlcXVlKCApIDtcblxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5sZW4gPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiB0aGlzLmVtcHR5ID8gMCA6IDEgO1xuXG59IDtcblxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5jYXBhY2l0eSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIDEgO1xuXG59IDtcblxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiogKCApIHtcblxuXHRpZiAoIHRoaXMuZW1wdHkgKSByZXR1cm4gO1xuXG5cdHlpZWxkIHRoaXMudmFsdWUgO1xuXG59IDtcblxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5hcHBlbmQgPVxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5hcHBlbmRsZWZ0ID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdHRoaXMuZW1wdHkgPSBmYWxzZSA7XG5cdHRoaXMudmFsdWUgPSB4IDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCApIHtcblxuXHR0aGlzLmVtcHR5ID0gdHJ1ZSA7XG5cdHRoaXMudmFsdWUgPSAwIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoICkge1xuXG5cdHJldHVybiBuZXcgU2luZ2xlRWxlbWVudERlcXVlKCB0aGlzICkgO1xuXG59IDtcblxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5wb3AgPVxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5wb3BsZWZ0ID0gZnVuY3Rpb24gKCApIHtcblxuXHRpZiAoIHRoaXMuZW1wdHkgKSB0aHJvdyBuZXcgSW5kZXhFcnJvciggXCJwb3AgLyBwb3BsZWZ0XCIgKSA7XG5cblx0Y29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlIDtcblxuXHR0aGlzLmVtcHR5ID0gdHJ1ZSA7XG5cdHRoaXMudmFsdWUgPSAwIDtcblxuXHRyZXR1cm4gdmFsdWUgO1xuXG59IDtcblxuU2luZ2xlRWxlbWVudERlcXVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoIGkgKSB7XG5cblx0aWYgKCB0aGlzLmVtcHR5IHx8IGkgIT09IDAgKSB0aHJvdyBuZXcgSW5kZXhFcnJvciggaSApIDtcblxuXHRyZXR1cm4gdGhpcy52YWx1ZSA7XG5cbn0gO1xuXG5TaW5nbGVFbGVtZW50RGVxdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICggaSAsIHZhbHVlICkge1xuXG5cdGlmICggdGhpcy5lbXB0eSB8fCBpICE9PSAwICkgdGhyb3cgbmV3IEluZGV4RXJyb3IoIGkgKSA7XG5cblx0dGhpcy52YWx1ZSA9IHZhbHVlIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuIl19