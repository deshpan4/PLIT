'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = UnboundedDeque;

var _ArbitrarySizeDeque = require('./ArbitrarySizeDeque');

var _ArbitrarySizeDeque2 = _interopRequireDefault(_ArbitrarySizeDeque);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function UnboundedDeque(iterable) {

	this.growth = 2;

	this.minsize = 10;

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	if (iterable !== null) this.extend(iterable);
}

UnboundedDeque.prototype = new _ArbitrarySizeDeque2.default();

UnboundedDeque.prototype._copy = function (container) {

	var len = this.length;

	for (var i = 0; i < len; ++i) {
		container[i] = this.get(i);
	}
};

UnboundedDeque.prototype._realloc = function (newsize) {

	var container = new Array(newsize);

	this._copy(container);

	this.container = container;

	this.center = 0;

	this.currentsize = newsize;
};

UnboundedDeque.prototype._shrink = function () {

	var newsize = Math.max(this.minsize, this.length * this.growth);

	if (newsize * this.growth >= this.currentsize) return;

	this._realloc(newsize);
};

UnboundedDeque.prototype._grow = function (newlen) {

	if (newlen <= this.currentsize) return;

	this._realloc(newlen * this.growth);
};

UnboundedDeque.prototype.len = function () {

	return this.length;
};

UnboundedDeque.prototype.capacity = function () {

	return this.currentsize;
};

UnboundedDeque.prototype.append = function (x) {

	this._grow(this.length + 1);

	var i = (this.center + this.length) % this.currentsize;
	this.container[i] = x;
	++this.length;

	return this;
};

UnboundedDeque.prototype.appendleft = function (x) {

	this._grow(this.length + 1);

	--this.center;
	this.center += this.currentsize;
	this.center %= this.currentsize;
	this.container[this.center] = x;

	++this.length;

	return this;
};

UnboundedDeque.prototype.clear = function () {

	this.currentsize = this.minsize;

	this.container = new Array(this.currentsize);

	this.center = 0;

	this.length = 0;

	return this;
};

UnboundedDeque.prototype.copy = function () {

	return new UnboundedDeque(this);
};

UnboundedDeque.prototype._where = function (i) {

	this._checkbounds(i);

	return [this.container, (this.center + i) % this.currentsize];
};

UnboundedDeque.prototype._popindex = function (container, index) {

	var value = container[index];

	// GC
	// TODO use null instead of 0 for non-Number deques
	container[index] = 0;

	--this.length;

	this._shrink();

	return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbXBsZW1lbnRhdGlvbi9VbmJvdW5kZWREZXF1ZS5qcyJdLCJuYW1lcyI6WyJVbmJvdW5kZWREZXF1ZSIsIml0ZXJhYmxlIiwiZ3Jvd3RoIiwibWluc2l6ZSIsImN1cnJlbnRzaXplIiwiY29udGFpbmVyIiwiQXJyYXkiLCJjZW50ZXIiLCJsZW5ndGgiLCJleHRlbmQiLCJwcm90b3R5cGUiLCJfY29weSIsImxlbiIsImkiLCJnZXQiLCJfcmVhbGxvYyIsIm5ld3NpemUiLCJfc2hyaW5rIiwiTWF0aCIsIm1heCIsIl9ncm93IiwibmV3bGVuIiwiY2FwYWNpdHkiLCJhcHBlbmQiLCJ4IiwiYXBwZW5kbGVmdCIsImNsZWFyIiwiY29weSIsIl93aGVyZSIsIl9jaGVja2JvdW5kcyIsIl9wb3BpbmRleCIsImluZGV4IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUV3QkEsYzs7QUFGeEI7Ozs7OztBQUVlLFNBQVNBLGNBQVQsQ0FBMEJDLFFBQTFCLEVBQXFDOztBQUVuRCxNQUFLQyxNQUFMLEdBQWMsQ0FBZDs7QUFFQSxNQUFLQyxPQUFMLEdBQWUsRUFBZjs7QUFFQSxNQUFLQyxXQUFMLEdBQW1CLEtBQUtELE9BQXhCOztBQUVBLE1BQUtFLFNBQUwsR0FBaUIsSUFBSUMsS0FBSixDQUFXLEtBQUtGLFdBQWhCLENBQWpCOztBQUVBLE1BQUtHLE1BQUwsR0FBYyxDQUFkOztBQUVBLE1BQUtDLE1BQUwsR0FBYyxDQUFkOztBQUVBLEtBQUtQLGFBQWEsSUFBbEIsRUFBeUIsS0FBS1EsTUFBTCxDQUFhUixRQUFiO0FBR3pCOztBQUVERCxlQUFlVSxTQUFmLEdBQTJCLGtDQUEzQjs7QUFFQVYsZUFBZVUsU0FBZixDQUF5QkMsS0FBekIsR0FBaUMsVUFBV04sU0FBWCxFQUF1Qjs7QUFFdkQsS0FBTU8sTUFBTSxLQUFLSixNQUFqQjs7QUFFQSxNQUFNLElBQUlLLElBQUksQ0FBZCxFQUFrQkEsSUFBSUQsR0FBdEIsRUFBNEIsRUFBRUMsQ0FBOUI7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QixJQUFzQixLQUFLVCxXQUE5QyxDQUFQO0FBRUEsQ0FORDs7QUFTQUosZUFBZVUsU0FBZixDQUF5Qm9CLFNBQXpCLEdBQXFDLFVBQVd6QixTQUFYLEVBQXVCMEIsS0FBdkIsRUFBK0I7O0FBRW5FLEtBQU1DLFFBQVEzQixVQUFVMEIsS0FBVixDQUFkOztBQUVBO0FBQ0E7QUFDQTFCLFdBQVUwQixLQUFWLElBQW1CLENBQW5COztBQUVBLEdBQUUsS0FBS3ZCLE1BQVA7O0FBRUEsTUFBS1MsT0FBTDs7QUFFQSxRQUFPZSxLQUFQO0FBRUEsQ0FkRCIsImZpbGUiOiJVbmJvdW5kZWREZXF1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcmJpdHJhcnlTaXplRGVxdWUgZnJvbSAnLi9BcmJpdHJhcnlTaXplRGVxdWUnIDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVW5ib3VuZGVkRGVxdWUgKCBpdGVyYWJsZSApIHtcblxuXHR0aGlzLmdyb3d0aCA9IDIgO1xuXG5cdHRoaXMubWluc2l6ZSA9IDEwIDtcblxuXHR0aGlzLmN1cnJlbnRzaXplID0gdGhpcy5taW5zaXplIDtcblxuXHR0aGlzLmNvbnRhaW5lciA9IG5ldyBBcnJheSggdGhpcy5jdXJyZW50c2l6ZSApIDtcblxuXHR0aGlzLmNlbnRlciA9IDAgO1xuXG5cdHRoaXMubGVuZ3RoID0gMCA7XG5cblx0aWYgKCBpdGVyYWJsZSAhPT0gbnVsbCApIHRoaXMuZXh0ZW5kKCBpdGVyYWJsZSApIDtcblxuXG59XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZSA9IG5ldyBBcmJpdHJhcnlTaXplRGVxdWUoICkgO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX2NvcHkgPSBmdW5jdGlvbiAoIGNvbnRhaW5lciApIHtcblxuXHRjb25zdCBsZW4gPSB0aGlzLmxlbmd0aCA7XG5cblx0Zm9yICggbGV0IGkgPSAwIDsgaSA8IGxlbiA7ICsraSApIGNvbnRhaW5lcltpXSA9IHRoaXMuZ2V0KCBpICkgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl9yZWFsbG9jID0gZnVuY3Rpb24gKCBuZXdzaXplICkge1xuXG5cdGNvbnN0IGNvbnRhaW5lciA9IG5ldyBBcnJheSggbmV3c2l6ZSApIDtcblxuXHR0aGlzLl9jb3B5KCBjb250YWluZXIgKSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBjb250YWluZXIgO1xuXG5cdHRoaXMuY2VudGVyID0gMCA7XG5cblx0dGhpcy5jdXJyZW50c2l6ZSA9IG5ld3NpemUgO1xuXG59IDtcblxuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX3NocmluayA9IGZ1bmN0aW9uICggKSB7XG5cblx0Y29uc3QgbmV3c2l6ZSA9IE1hdGgubWF4KCB0aGlzLm1pbnNpemUgLCB0aGlzLmxlbmd0aCAqIHRoaXMuZ3Jvd3RoICkgO1xuXG5cdGlmICggbmV3c2l6ZSAqIHRoaXMuZ3Jvd3RoID49IHRoaXMuY3VycmVudHNpemUgKSByZXR1cm4gO1xuXG5cdHRoaXMuX3JlYWxsb2MoIG5ld3NpemUgKSA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuX2dyb3cgPSBmdW5jdGlvbiAoIG5ld2xlbiApIHtcblxuXHRpZiAoIG5ld2xlbiA8PSB0aGlzLmN1cnJlbnRzaXplICkgcmV0dXJuIDtcblxuXHR0aGlzLl9yZWFsbG9jKCBuZXdsZW4gKiB0aGlzLmdyb3d0aCApIDtcblxufSA7XG5cblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLmxlbiA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMubGVuZ3RoIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jYXBhY2l0eSA9IGZ1bmN0aW9uICggKSB7XG5cblx0cmV0dXJuIHRoaXMuY3VycmVudHNpemUgO1xuXG59IDtcblxuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdHRoaXMuX2dyb3coIHRoaXMubGVuZ3RoICsgMSApIDtcblxuXHRjb25zdCBpID0gKCB0aGlzLmNlbnRlciArIHRoaXMubGVuZ3RoICkgJSB0aGlzLmN1cnJlbnRzaXplO1xuXHR0aGlzLmNvbnRhaW5lcltpXSA9IHggO1xuXHQrK3RoaXMubGVuZ3RoIDtcblxuXHRyZXR1cm4gdGhpcyA7XG5cbn0gO1xuXG5VbmJvdW5kZWREZXF1ZS5wcm90b3R5cGUuYXBwZW5kbGVmdCA9IGZ1bmN0aW9uICggeCApIHtcblxuXHR0aGlzLl9ncm93KCB0aGlzLmxlbmd0aCArIDEgKSA7XG5cblx0LS10aGlzLmNlbnRlciA7XG5cdHRoaXMuY2VudGVyICs9IHRoaXMuY3VycmVudHNpemU7XG5cdHRoaXMuY2VudGVyICU9IHRoaXMuY3VycmVudHNpemU7XG5cdHRoaXMuY29udGFpbmVyW3RoaXMuY2VudGVyXSA9IHggO1xuXG5cdCsrdGhpcy5sZW5ndGggO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICggKSB7XG5cblx0dGhpcy5jdXJyZW50c2l6ZSA9IHRoaXMubWluc2l6ZSA7XG5cblx0dGhpcy5jb250YWluZXIgPSBuZXcgQXJyYXkoIHRoaXMuY3VycmVudHNpemUgKSA7XG5cblx0dGhpcy5jZW50ZXIgPSAwIDtcblxuXHR0aGlzLmxlbmd0aCA9IDAgO1xuXG5cdHJldHVybiB0aGlzIDtcblxufSA7XG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCApIHtcblxuXHRyZXR1cm4gbmV3IFVuYm91bmRlZERlcXVlKCB0aGlzICkgO1xuXG59IDtcblxuVW5ib3VuZGVkRGVxdWUucHJvdG90eXBlLl93aGVyZSA9IGZ1bmN0aW9uICggaSApIHtcblxuXHR0aGlzLl9jaGVja2JvdW5kcyggaSApIDtcblxuXHRyZXR1cm4gWyB0aGlzLmNvbnRhaW5lciAsICggdGhpcy5jZW50ZXIgKyBpICkgJSB0aGlzLmN1cnJlbnRzaXplXSA7XG5cbn0gO1xuXG5cblVuYm91bmRlZERlcXVlLnByb3RvdHlwZS5fcG9waW5kZXggPSBmdW5jdGlvbiAoIGNvbnRhaW5lciAsIGluZGV4ICkge1xuXG5cdGNvbnN0IHZhbHVlID0gY29udGFpbmVyW2luZGV4XSA7XG5cblx0Ly8gR0Ncblx0Ly8gVE9ETyB1c2UgbnVsbCBpbnN0ZWFkIG9mIDAgZm9yIG5vbi1OdW1iZXIgZGVxdWVzXG5cdGNvbnRhaW5lcltpbmRleF0gPSAwIDtcblxuXHQtLXRoaXMubGVuZ3RoIDtcblxuXHR0aGlzLl9zaHJpbmsoICkgO1xuXG5cdHJldHVybiB2YWx1ZSA7XG5cbn0gO1xuIl19